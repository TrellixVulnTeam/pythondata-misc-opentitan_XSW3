import os.path
__dir__ = os.path.split(os.path.abspath(os.path.realpath(__file__)))[0]
data_location = os.path.join(__dir__, "resources")
src = "https://github.com/lowRISC/opentitan"

# Module version
version_str = "0.0.post8881"
version_tuple = (0, 0, 8881)
try:
    from packaging.version import Version as V
    pversion = V("0.0.post8881")
except ImportError:
    pass

# Data version info
data_version_str = "0.0.post8769"
data_version_tuple = (0, 0, 8769)
try:
    from packaging.version import Version as V
    pdata_version = V("0.0.post8769")
except ImportError:
    pass
data_git_hash = "00a550487b93c78cfd86ecc2b4fa204d8cf20f8a"
data_git_describe = "v0.0-8769-g00a550487"
data_git_msg = """\
commit 00a550487b93c78cfd86ecc2b4fa204d8cf20f8a
Author: Chris Frantz <cfrantz@google.com>
Date:   Tue Nov 9 16:49:37 2021 -0800

    [bazel] Autogenerated rules via `cargo raze`
    
    ```
    cd sw/host
    cargo raze
    ```
    
    Signed-off-by: Chris Frantz <cfrantz@google.com>

"""

# Tool version info
tool_version_str = "0.0.post112"
tool_version_tuple = (0, 0, 112)
try:
    from packaging.version import Version as V
    ptool_version = V("0.0.post112")
except ImportError:
    pass


def data_file(f):
    """Get absolute path for file inside pythondata_misc_opentitan."""
    fn = os.path.join(data_location, f)
    fn = os.path.abspath(fn)
    if not os.path.exists(fn):
        raise IOError("File {f} doesn't exist in pythondata_misc_opentitan".format(f))
    return fn
