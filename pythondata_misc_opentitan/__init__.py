import os.path
__dir__ = os.path.split(os.path.abspath(os.path.realpath(__file__)))[0]
data_location = os.path.join(__dir__, "resources")
src = "https://github.com/lowRISC/opentitan"

# Module version
version_str = "0.0.post5769"
version_tuple = (0, 0, 5769)
try:
    from packaging.version import Version as V
    pversion = V("0.0.post5769")
except ImportError:
    pass

# Data version info
data_version_str = "0.0.post5674"
data_version_tuple = (0, 0, 5674)
try:
    from packaging.version import Version as V
    pdata_version = V("0.0.post5674")
except ImportError:
    pass
data_git_hash = "93fe50cb47c3c81e77290c7fc990eb1d01a4ff3f"
data_git_describe = "v0.0-5674-g93fe50cb4"
data_git_msg = """\
commit 93fe50cb47c3c81e77290c7fc990eb1d01a4ff3f
Author: Michael Schaffner <msf@google.com>
Date:   Wed Mar 31 16:25:42 2021 -0700

    [top/chip] Rename chip-level tops
    
    This renames all target specific toplevels such that they are prefixed
    with chip_* instead of top_*. This is done to distinguish the
    autogenerated toplevel, which contains all the IPs, crossbar, etc, from
    the chiplevel wrappers that are target-specific.
    
    Note that another option would have been to rename
    top_<name> -> <name>, but we refrained from doing so as this would
    change the definition of what we have so far referred to as the top,
    and would have a more profound impact on tooling scripts, generated
    headers and packages that use the name top_<name> inline (e.g.
    hierarchical paths) or as part of the file name.
    
    Signed-off-by: Michael Schaffner <msf@google.com>

"""

# Tool version info
tool_version_str = "0.0.post95"
tool_version_tuple = (0, 0, 95)
try:
    from packaging.version import Version as V
    ptool_version = V("0.0.post95")
except ImportError:
    pass


def data_file(f):
    """Get absolute path for file inside pythondata_misc_opentitan."""
    fn = os.path.join(data_location, f)
    fn = os.path.abspath(fn)
    if not os.path.exists(fn):
        raise IOError("File {f} doesn't exist in pythondata_misc_opentitan".format(f))
    return fn
