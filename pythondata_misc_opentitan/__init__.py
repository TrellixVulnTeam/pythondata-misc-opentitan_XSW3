import os.path
__dir__ = os.path.split(os.path.abspath(os.path.realpath(__file__)))[0]
data_location = os.path.join(__dir__, "resources")
src = "https://github.com/lowRISC/opentitan"

# Module version
version_str = "0.0.post8507"
version_tuple = (0, 0, 8507)
try:
    from packaging.version import Version as V
    pversion = V("0.0.post8507")
except ImportError:
    pass

# Data version info
data_version_str = "0.0.post8395"
data_version_tuple = (0, 0, 8395)
try:
    from packaging.version import Version as V
    pdata_version = V("0.0.post8395")
except ImportError:
    pass
data_git_hash = "0e364a551cad95556eee33d250aa8a1aec642383"
data_git_describe = "v0.0-8395-g0e364a551"
data_git_msg = """\
commit 0e364a551cad95556eee33d250aa8a1aec642383
Author: Drew Macrae <drewmacrae@google.com>
Date:   Thu Oct 21 16:45:43 2021 +0000

    [bazel] Fixup bazel rules for more autogen
    
    * rule for alert_handler_regs in autogened location
    * added multibits.h to base
    * dif_clkmgr_unittest.cc is broken and omitted by meson.build
    * more of the difs were changed to use autogenerated components
    * replaced broken dif_clkmgr_unittest.cc file
    * added unused autogenerated unittests and rules to build supporting register targets
    
    Signed-off-by: Drew Macrae <drewmacrae@google.com>

"""

# Tool version info
tool_version_str = "0.0.post112"
tool_version_tuple = (0, 0, 112)
try:
    from packaging.version import Version as V
    ptool_version = V("0.0.post112")
except ImportError:
    pass


def data_file(f):
    """Get absolute path for file inside pythondata_misc_opentitan."""
    fn = os.path.join(data_location, f)
    fn = os.path.abspath(fn)
    if not os.path.exists(fn):
        raise IOError("File {f} doesn't exist in pythondata_misc_opentitan".format(f))
    return fn
